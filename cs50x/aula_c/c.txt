CS 50 - C
Link aula: https://www.youtube.com/watch?v=ywg7cW0Txs4

(Para limpar o terminal, além do comando "clear", podemos usar CTRL+L)

Declaramos inicialmente as bibliotecas, padrão (onde contém a função print e formatação de variáveis; e a biblioteca de
CS50 para usar string.

Em C, precisamos criar o código no arquivo ".c" e depois rodar o compilador, usando no terminal:
"make (nome do arquivo sem a extensão)"

O VS Code criará um arquivo de mesmo nome, sem extensão, o que a prática o compilador criou o arquivo no formato
 binário.

Para rodar o código, digitar no terminal ./(nome do arquivo binário), que significa rodar o arquivo desta pasta chamado
(nome do arquivo)

-----------------------
-> É uma conveção em C usar o {} na linha abaixo da condicional.
-> Single quotes '' para char (single characters) e double quotes "" para linhas de texto string.
-> true ou false precisam ser incluídos com biblioteca booleana. Porém na CS50 já tem essas declarações
-> 0 é considerado falso: while (0); qualquer outro número diferente de zero será verdadeiro.
-> CTRL + C no terminal para cancelar um código, como loop infinito.
-> CTRL + L para limpar o terminal. Mesmo que "clear"
-> Comandos Linux (terminal): code (escrever), ls (listar arquivos), cd (voltar ou acessar alguma pasta), cp (copiar)
mv (renomear e/ou mover arquivos), mkdir (criar nova pasta), rm (remover arquivo), rmdir (remover diretório)
-> const int é uma forma de programar de forma defensiva para que não alteremos uma constante ao longo do nosso código.
-> ; no final e declarar o que é a variável "int i;" é importante para não querar na hora de compilar.
-> Compilador é o que transforma o arquivo ".c" em um arquivo executável (binário).
-> Comentário: // ou /**/ para uma linha
-> Comentário pode ser uma aproximação de pseudocode. Descrever em linguagem humana o que precisa ser feito.
Depois converter isso em liguagem de programação.
-> Declarar funções tipo_de_saída nome_da_função(input_da_função) -> Ex: int get_size(void) para o exemplo do Mario
-> As funções podem ser criadas no final do programa, mas precisam ser declaradas no começo, senão o compilador
não reconhece elas, já que lê de cima para baixo. A declaração é igual quando criamos a função, mas apenas o
"cabeçalho": "tipo_de_saída nome_da_função(input_da_função);" e não tudo o que ela faz.
-> %s (STRINGS) e %i (INTEGERS)
-> int conta até aproximadamente 2 bilhões (32 bits). O primeiro número representa 0 para positivos (0......) e
1 para negativos
-> long (%li) - long integer para números maiores.
-> float (%f) número com decimal
-> floating-point imprecision: se eu fizer 1/3, será 0.33333, mas eu se quiser ver mais casas decimais, vou usar
%.20f (incicando que estou colocando variável float com 20 casas decimais), ele vai dar 0.333334326(...) Por limitação
de memória, quando passa a barreira das possíveis permutações de 0 e 1, ele começa a dar inconsistência.